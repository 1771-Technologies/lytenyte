import type { ColumnGroupVisibilityCore, ColumnPinCore } from "@1771technologies/grid-types/core";
import { columnsGroupVisibility } from "./columns-group-visibility.js";
import { COLUMN_MARKER_ID, GROUP_COLUMN_PREFIX } from "@1771technologies/grid-constants";

export type ColumnLike = {
  id: string;
  hide?: boolean;
  groupVisibility?: ColumnGroupVisibilityCore;
  groupPath?: string[];
  pin?: ColumnPinCore;
};

/**
 * Filters and processes columns to determine which should be visible based on hide states and group visibility rules.
 *
 * This function works in three steps:
 * 1. Filters out hidden columns based on individual column hide states and base hide property
 * 2. Processes the remaining columns through group visibility rules
 * 3. Returns empty array if only marker or auto-generated group columns remain
 *
 * @typeParam T - Column type that extends ColumnLike, must include at least an id
 * @typeParam K - Base column type without id property
 *
 * @param columns - Array of columns to process
 * @param base - Base column properties that apply when not specified in individual columns
 * @param isGroupCollapsed - Function that determines if a group (identified by its path) is collapsed
 * @param delimiter - String used to join group path segments into a unique group identifier
 *
 * @returns Array of visible columns after applying hide states and group visibility rules.
 *          Returns empty array if only marker or auto-generated group columns would be visible.
 *
 * @remarks
 * The hide property is resolved by checking the individual column first, then falling back to the base hide value.
 * If both are undefined, the column is considered not hidden.
 *
 * Special columns (marker column and auto-generated group columns) are not considered when determining
 * if there are any visible columns. If these are the only columns that would be visible, an empty array
 * is returned instead.
 *
 * @example
 * ```typescript
 * const columns = [
 *   { id: '1', hide: false, groupPath: ['group1'] },
 *   { id: '2', groupPath: ['group1'] },
 *   { id: '3', hide: true }
 * ];
 *
 * const baseProperties = {
 *   hide: false,
 *   groupVisibility: 'visible-when-open' as const
 * };
 *
 * const visibleColumns = columnsVisible(
 *   columns,
 *   baseProperties,
 *   (groupId) => collapsedGroups.has(groupId),
 *   '/'
 * );
 * ```
 */
export function columnsVisibleCalc<T extends ColumnLike, K extends Omit<ColumnLike, "id">>(
  columns: T[],
  base: K,
  isGroupCollapsed: (id: string) => boolean,
  delimiter: string,
) {
  const nonHiddenColumns = columns.filter((c) => !(c.hide ?? base.hide));

  const visible = columnsGroupVisibility(nonHiddenColumns, isGroupCollapsed, delimiter);

  // If the only columns remaining the are the marker column and/or the group columns then just hide
  // all the columns. There should be at least one visible non-autogenerated column.
  if (
    visible.filter((c) => c.id !== COLUMN_MARKER_ID && !c.id.startsWith(GROUP_COLUMN_PREFIX))
      .length === 0
  ) {
    return [];
  }

  return visible;
}
