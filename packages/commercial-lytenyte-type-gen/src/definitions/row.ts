import type { FunctionType, InterfaceType, InterfaceTypePartial, UnionType } from "../+types.js";
import {
  GridProp,
  RowIndeterminateProp,
  RowIndexProp,
  RowNodeProp,
  RowSelectedProp,
} from "./shared-properties.js";

const RowBase: InterfaceTypePartial = {
  kind: "interface-partial",
  properties: [
    {
      kind: "property",
      name: "id",
      value: "string",
      optional: false,
      tsDoc: `
        A unique \`id\` for a given row. The \`id\` is generated by a given {@link RowDataSource}.
        Every row must have a unique \`id\`.
      `,
      doc: { en: `` },
    },
    {
      kind: "property",
      name: "loading",
      value: "boolean",
      optional: true,
      tsDoc: `
        An optional flag indicating whether the row is currently loading data.
        Useful for asynchronous data loading scenarios.
      `,
      doc: { en: `` },
    },
    {
      kind: "property",
      name: "error",
      value: "unknown",
      optional: true,
      tsDoc: `
        An error object associated with this row. The type is intentionally flexible,
        and should be interpreted by the consumer based on context.
      `,
      doc: { en: `` },
    },
  ],
};

export const RowLeaf: InterfaceType = {
  kind: "interface",
  extends: RowBase,
  name: "RowLeaf<T = any>",
  export: true,
  tsDoc: `
    Represents a leaf row in the grid. A leaf row is a terminal node that has no children.
    These rows typically represent the raw dataset and are used for aggregations and visual representation.

    @group Row
  `,
  doc: { en: `` },
  properties: [
    {
      kind: "property",
      name: "kind",
      value: '"leaf"',
      optional: false,
      tsDoc: `Discriminant used to identify this row as a \`RowLeaf\`.`,
      doc: { en: `` },
    },
    {
      kind: "property",
      name: "data",
      value: "T | null",
      optional: false,
      tsDoc: `
        The data payload associated with this row. Usually a plain object or array,
        this is passed to column field logic to extract cell values.
      `,
      doc: { en: `` },
    },
  ],
};

export const RowGroup: InterfaceType = {
  kind: "interface",
  extends: RowBase,
  name: "RowGroup",
  export: true,
  tsDoc: `
    Represents a group (branch) row which may contain children rows (leaf or other groups).
    Group rows are used in hierarchical views and support expansion/collapse behavior.

    @group Row
  `,
  doc: { en: `` },
  properties: [
    {
      kind: "property",
      name: "kind",
      value: '"branch"',
      optional: false,
      tsDoc: `Discriminant used to identify this row as a \`RowGroup\`.`,
      doc: { en: `` },
    },
    {
      kind: "property",
      name: "key",
      value: "string | null",
      optional: false,
      tsDoc: `
        The group key used to organize this branch in the hierarchy. Acts as part of the grouping path.
      `,
      doc: { en: `` },
    },
    {
      kind: "property",
      name: "data",
      value: "Record<string, unknown>",
      optional: false,
      tsDoc: `
        Group-level aggregated or summarized data. Must be an object with string keys;
        values may be any type depending on aggregation strategy.
      `,
      doc: { en: `` },
    },
    {
      kind: "property",
      name: "depth",
      value: "number",
      optional: false,
      tsDoc: `Depth level from the root; used to determine visual indenting and structure.`,
      doc: { en: `` },
    },
    {
      kind: "property",
      name: "errorGroup",
      value: "unknown",
      doc: { en: `` },
      optional: true,
      tsDoc: `
        An error that applies to the group row. This is usually set when the group fails to load 
        its children rows.
      `,
    },
    {
      kind: "property",
      name: "loadingGroup",
      value: "boolean",
      doc: { en: `` },
      optional: true,
      tsDoc: `
        A boolean indicating if the group expansion is loading. This is normally used for server 
        data loading, which expansions occur only after the group's children data has been fetched.
      `,
    },
  ],
};

export const RowNode: UnionType = {
  kind: "union",
  name: "RowNode<T>",
  export: true,
  types: ["RowLeaf<T>", "RowGroup"],
  tsDoc: `
    A union of {@link RowLeaf} and {@link RowGroup}. Represents any row that may appear in the grid view.
    Used generically when the row type is not known ahead of time.

    @group Row
  `,
  doc: { en: `` },
};

export const RowPin: UnionType = {
  kind: "union",
  name: "RowPin",
  export: true,
  types: ['"top"', '"bottom"', "null"],
  tsDoc: `
    Indicates the pinning position of a row:
    - "top": pinned to top,
    - "bottom": pinned to bottom,
    - null: not pinned.
    Pinned rows remain visible during scrolling.

    @group Row
  `,
  doc: { en: `` },
};

export const RowSection: UnionType = {
  kind: "union",
  name: "RowSection",
  doc: { en: `` },
  export: true,
  tsDoc: `
    Specifies which section of the grid a row belongs to:
    - "top": pinned to the top area,
    - "bottom": pinned to the bottom area,
    - "center": scrollable middle area,
    - "flat": single flattened section.

    @group Row
  `,
  types: ['"top"', '"bottom"', '"center"', '"flat"'],
};

export const RowHeight: UnionType = {
  kind: "union",
  name: "RowHeight",
  export: true,
  types: ["number", "`fill:${number}`", "((i: number) => number)"],
  tsDoc: `
    A height configuration for rows. May be:
    - A fixed number (e.g. 30),
    - A fill value (e.g. \`fill:1\`),
    - A function that returns dynamic row height based on index.

    @group Row
  `,
  doc: { en: `` },
};

export const RowFullWidthPredicateParams: InterfaceType = {
  kind: "interface",
  name: "RowFullWidthPredicateParams<T>",
  tsDoc: `
    Parameters provided to the {@link RowFullWidthPredicate} function to determine
    if a row should span full width of the grid.

    @group Row
  `,
  doc: { en: `` },
  export: true,
  properties: [GridProp, RowIndexProp, RowNodeProp],
};

export const RowFullWidthPredicate: FunctionType = {
  kind: "function",
  name: "RowFullWidthPredicate<T>",
  export: true,
  doc: { en: `` },
  tsDoc: `
    Predicate function to determine if a row should render in full-width mode.
    Commonly used for custom summary or grouped views.

    @group Row
  `,
  properties: [
    {
      kind: "property",
      doc: { en: `` },
      name: "params",
      optional: false,
      tsDoc: `The input parameters provided to the full width predicate.`,
      value: "RowFullWidthPredicateParams<T>",
    },
  ],
  return: "boolean",
};

export const RowFullWidthRendererParams: InterfaceType = {
  kind: "interface",
  name: "RowFullWidthRendererParams<T>",
  tsDoc: `
    Parameters provided to the full-width row renderer.
    Includes row metadata and selection state.

    @group Row
  `,
  doc: { en: `` },
  properties: [RowIndexProp, RowNodeProp, GridProp, RowSelectedProp, RowIndeterminateProp],
  export: true,
};

export const RowFullWidthRendererFn: FunctionType = {
  kind: "function",
  name: "RowFullWidthRendererFn<T>",
  export: true,
  tsDoc: `
    Function to render the full-width row content. Returns a ReactNode to be rendered as the row.

    @group Row
  `,
  doc: { en: `` },
  properties: [
    {
      kind: "property",
      name: "params",
      tsDoc: `The full width renderer input parameters.`,
      doc: { en: `` },
      optional: false,
      value: "RowFullWidthRendererParams<T>",
    },
  ],
  return: "ReactNode",
};
