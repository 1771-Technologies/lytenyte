import type { FunctionType, InterfaceType, InterfaceTypePartial, UnionType } from "../+types.js";
import { GridProp, RowIndexProp, RowNodeProp } from "./shared-properties.js";

export const RowBase: InterfaceTypePartial = {
  kind: "interface-partial",
  properties: [
    {
      kind: "property",
      name: "id",
      value: "string",
      optional: false,
      tsDoc: `
        A unique \`id\` for a given row. The \`id\` is generated by a given {@link RowDataSource}.
        Every row should have a unique \`id\` associated with.
      `,
      seeAlso: [
        {
          kind: "link",
          name: "Row Data Source",
          link: "TODO",
          description: "Learn how rows are created and updated.",
        },
      ],
      doc: {
        en: ``,
      },
    },
    {
      kind: "property",
      name: "loading",
      value: "boolean",
      optional: true,
      tsDoc: `
        An optional property that indicates if a row is loading data. Primarily used to support
        asynchronous row loading.
      `,
      seeAlso: [
        {
          kind: "link",
          name: "Async Row Data Source",
          link: "TODO",
          description: "An asynchronous row data source",
        },
      ],
      doc: {
        en: ``,
      },
    },
    {
      kind: "property",
      name: "error",
      value: "unknown",
      optional: true,
      tsDoc: `
        An error associated with a row. This is implementation dependent. The type is not known
        ahead of time, and should be checked for interacting with the error value.
      `,
      doc: {
        en: ``,
      },
    },
  ],
};

export const RowLeaf: InterfaceType = {
  kind: "interface",
  extends: RowBase,
  name: "RowLeaf<T = any>",
  export: true,
  tsDoc: `
    The leaf row type. As the name suggests, leaf rows do not have any further children rows
    underneath them. Leaf rows are generally used to derivate aggregations and groupings. A
    complete flat data grid will only have leaf rows.
  `,
  doc: {
    en: ``,
  },
  properties: [
    {
      kind: "property",
      name: "kind",
      value: '"leaf"',
      optional: false,
      tsDoc: `
        A type discriminant used to narrow the {@link RowNode} type to a {@link RowLeaf} type.
      `,
      doc: {
        en: ``,
      },
    },
    {
      kind: "property",
      name: "data",
      value: "T",
      optional: false,
      tsDoc: `
        The data associated with the row. The data may be any type but is normally a plain 
        JavaScript object or array. The row data is provided to a column field to determine 
        the value for a given cell for a particular column.
      `,
      seeAlso: [
        {
          kind: "type",
          name: "Column",
          description: "Column's use a row's data field to determine the value of a cell.",
        },
        {
          kind: "type",
          name: "ColumnField",
          description: "The column field determines how a cell's value is calculated.",
        },
        {
          kind: "link",
          name: "Column Field",
          description:
            "See the full guide on column fields and learn how cell values are determined.",
          link: "TODO",
        },
      ],
      doc: {
        en: ``,
      },
    },
  ],
};

export const RowGroup: InterfaceType = {
  kind: "interface",
  extends: RowBase,
  name: "RowGroup",
  export: true,
  tsDoc: `
    The branch row type represents a row that has more rows underneath it, considered its child
    rows. A branch row may be expanded (in which case the children rows will be visible) or 
    collapsed (in which case the children rows will not be visible). The children rows may be 
    {@link RowLeaf} or {@link RowGroup} rows. 
  `,
  doc: {
    en: ``,
  },
  properties: [
    {
      kind: "property",
      name: "kind",
      value: '"branch"',
      optional: false,
      tsDoc: `
        A type discriminant used to narrow the {@link RowNode} to the {@link RowGroup} type.
      `,
      doc: {
        en: ``,
      },
    },
    {
      kind: "property",
      name: "key",
      value: "string",
      optional: false,
      tsDoc: `
        A path key associated with the branch node. The view of the grid is a flattened tree. A 
        branch represents a fork in the tree, and the key is the path value associated with that
        fork. 
      `,
      doc: {
        en: ``,
      },
    },
    {
      kind: "property",
      name: "data",
      value: "Record<string, unknown>",
      optional: false,
      tsDoc: `
        The data associated with the branch node. This must be a JavaScript object with string values
        for the key. The data values may be any type. This data is usually the result of aggregating
        the children rows of a branch node, but this is not strictly enforced.
      `,
      doc: {
        en: ``,
      },
    },
    {
      kind: "property",
      name: "depth",
      value: "number",
      optional: false,
      tsDoc: ``,
      doc: {
        en: ``,
      },
    },
  ],
};

export const RowNode: UnionType = {
  kind: "union",
  name: "RowNode<T>",
  export: true,
  types: ["RowLeaf<T>", "RowGroup"],
  tsDoc: `
    The union type of {@link RowLeaf} and {@link RowGroup}. A row node is a any row that may be 
    displayed in the grid or used for data aggregation purposes.
  `,
  seeAlso: [
    {
      kind: "link",
      name: "Row Nodes",
      description: "Learn more about the row nodes in the grid",
      link: "TODO",
    },
  ],
  doc: {
    en: ``,
  },
};

export const RowPin: UnionType = {
  kind: "union",
  name: "RowPin",
  export: true,
  types: ['"top"', '"bottom"', "null"],
  tsDoc: `
    The frozen state of the row. Rows may be pinned top or bottom. A pinned row remains visible 
    regardless of the scroll position. Rows pinned bottom will be displayed above rows pinned top
    if there is not enough viewport space available. 
  `,
  seeAlso: [
    {
      kind: "link",
      name: "Row Pinning",
      link: "TODO",
      description: "Learn how row pinning works.",
    },
    {
      kind: "link",
      name: "Column Pinning",
      link: "TODO",
      description: "The opposite of pinning rows, is pinning columns. They can be used together.",
    },
  ],
  doc: {
    en: ``,
  },
};

export const RowSection: UnionType = {
  kind: "union",
  name: "RowSection",
  doc: { en: `` },
  export: true,
  tsDoc: ``,
  types: ['"top"', '"bottom"', '"center"', '"flat"'],
};

export const RowHeight: UnionType = {
  kind: "union",
  name: "RowHeight",
  export: true,
  types: ["number", "`fill:${number}`", "((i: number) => number)"],
  tsDoc: ``,
  doc: { en: `` },
};

export const RowFullWidthPredicateParams: InterfaceType = {
  kind: "interface",
  name: "RowFullWidthPredicateParams<T>",
  tsDoc: ``,
  doc: { en: `` },
  export: true,
  properties: [GridProp, RowIndexProp, RowNodeProp],
};

export const RowFullWidthPredicate: FunctionType = {
  kind: "function",
  name: "RowFullWidthPredicate<T>",
  export: true,
  doc: { en: `` },
  tsDoc: ``,
  properties: [
    {
      kind: "property",
      doc: { en: `` },
      name: "params",
      optional: false,
      tsDoc: ``,
      value: "RowFullWidthPredicateParams<T>",
    },
  ],
  return: "boolean",
};

export const RowFullWidthRendererParams: InterfaceType = {
  kind: "interface",
  name: "RowFullWidthRendererParams<T>",
  tsDoc: ``,
  doc: { en: `` },
  properties: [RowIndexProp, RowNodeProp, GridProp],
  export: true,
};

export const RowFullWidthRendererFn: FunctionType = {
  kind: "function",
  name: "RowFullWidthRendererFn<T>",
  export: true,
  tsDoc: ``,
  doc: { en: `` },
  properties: [
    {
      kind: "property",
      name: "params",
      tsDoc: ``,
      doc: { en: `` },
      optional: false,
      value: "RowFullWidthRendererParams<T>",
    },
  ],
  return: "ReactNode",
};
