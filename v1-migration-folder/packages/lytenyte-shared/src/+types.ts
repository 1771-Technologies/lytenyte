/**
 *
 */
export interface ColumnGroupMeta {
  /**
   *
   */
  readonly colIdToGroupIds: Map<string, string[]>;

  /**
   *
   */
  readonly validGroupIds: Set<string>;

  /**
   *
   */
  readonly groupIsCollapsible: Map<string, boolean>;
}

/**
 *
 */
export type ColumnGroupVisibility = "always" | "close" | "open";

/**
 *
 */
export type ColumnPin = "start" | "end" | null;

/**
 *
 */
export interface RowDataStore<T> {
  /**
   *
   */
  readonly rowCount: GridAtomReadonly<number>;

  /**
   *
   */
  readonly rowTopCount: GridAtom<number>;

  /**
   *
   */
  readonly rowCenterCount: GridAtom<number>;

  /**
   *
   */
  readonly rowBottomCount: GridAtom<number>;

  /**
   *
   */
  readonly rowForIndex: (row: number) => GridAtomReadonly<RowNode<T> | null>;

  /**
   *
   */
  readonly rowClearCache: () => void;

  /**
   *
   */
  readonly rowInvalidateIndex: (row: number) => void;
}

/**
 *
 */
export interface GridAtom<T> {
  /**
   *
   */
  readonly get: () => T;

  /**
   *
   */
  readonly set: (v: T | ((p: T) => T)) => void;

  /**
   *
   */
  readonly watch: (fn: () => void) => () => void;

  /**
   *
   */
  readonly useValue: () => T;
}

/**
 *
 */
export interface GridAtomReadonly<T> {
  /**
   *
   */
  readonly get: () => T;

  /**
   *
   */
  readonly watch: (fn: () => void) => () => void;

  /**
   *
   */
  readonly useValue: () => T;
}

/**
 * The union type of {@link RowLeaf} and {@link RowGroup}. A row node is a any row that may be
 * displayed in the grid or used for data aggregation purposes.
 *
 * See:
 * - [Row Nodes](TODO): Learn more about the row nodes in the grid
 */
export type RowNode<T> = RowLeaf<T> | RowGroup;

/**
 * The leaf row type. As the name suggests, leaf rows do not have any further children rows
 * underneath them. Leaf rows are generally used to derivate aggregations and groupings. A
 * complete flat data grid will only have leaf rows.
 */
export interface RowLeaf<T = any> {
  /**
   * A unique `id` for a given row. The `id` is generated by a given {@link RowDataSource}.
   * Every row should have a unique `id` associated with.
   *
   * See:
   * - [Row Data Source](TODO): Learn how rows are created and updated.
   */
  readonly id: string;

  /**
   * An optional property that indicates if a row is loading data. Primarily used to support
   * asynchronous row loading.
   *
   * See:
   * - [Async Row Data Source](TODO): An asynchronous row data source
   */
  readonly loading?: boolean;

  /**
   * An error associated with a row. This is implementation dependent. The type is not known
   * ahead of time, and should be checked for interacting with the error value.
   */
  readonly error?: unknown;

  /**
   * A type discriminant used to narrow the {@link RowNode} type to a {@link RowLeaf} type.
   */
  readonly kind: "leaf";

  /**
   * The data associated with the row. The data may be any type but is normally a plain
   * JavaScript object or array. The row data is provided to a column field to determine
   * the value for a given cell for a particular column.
   *
   * See:
   * - {@link Column}: Column's use a row's data field to determine the value of a cell.
   * - {@link ColumnField}: The column field determines how a cell's value is calculated.
   * - [Column Field](TODO): See the full guide on column fields and learn how cell values are determined.
   */
  readonly data: T;
}

/**
 * The branch row type represents a row that has more rows underneath it, considered its child
 * rows. A branch row may be expanded (in which case the children rows will be visible) or
 * collapsed (in which case the children rows will not be visible). The children rows may be
 * {@link RowLeaf} or {@link RowGroup} rows.
 */
export interface RowGroup {
  /**
   * A unique `id` for a given row. The `id` is generated by a given {@link RowDataSource}.
   * Every row should have a unique `id` associated with.
   *
   * See:
   * - [Row Data Source](TODO): Learn how rows are created and updated.
   */
  readonly id: string;

  /**
   * An optional property that indicates if a row is loading data. Primarily used to support
   * asynchronous row loading.
   *
   * See:
   * - [Async Row Data Source](TODO): An asynchronous row data source
   */
  readonly loading?: boolean;

  /**
   * An error associated with a row. This is implementation dependent. The type is not known
   * ahead of time, and should be checked for interacting with the error value.
   */
  readonly error?: unknown;

  /**
   * A type discriminant used to narrow the {@link RowNode} to the {@link RowGroup} type.
   */
  readonly kind: "branch";

  /**
   * A path key associated with the branch node. The view of the grid is a flattened tree. A
   * branch represents a fork in the tree, and the key is the path value associated with that
   * fork.
   */
  readonly key: string;

  /**
   * The data associated with the branch node. This must be a JavaScript object with string values
   * for the key. The data values may be any type. This data is usually the result of aggregating
   * the children rows of a branch node, but this is not strictly enforced.
   */
  readonly data: Record<string, unknown>;
}

/**
 *
 */
export interface SortDateComparatorOptions {
  /**
   *
   */
  readonly nullsFirst?: boolean;

  /**
   *
   */
  readonly toIsoDateString?: (v: unknown) => string;

  /**
   *
   */
  readonly includeTime?: boolean;
}

/**
 *
 */
export interface SortNumberComparatorOptions {
  /**
   *
   */
  readonly nullsFirst?: boolean;

  /**
   *
   */
  readonly absoluteValue?: boolean;
}

/**
 *
 */
export interface SortStringComparatorOptions {
  /**
   *
   */
  readonly caseInsensitive?: boolean;

  /**
   *
   */
  readonly trimWhitespace?: boolean;

  /**
   *
   */
  readonly ignorePunctuation?: boolean;

  /**
   *
   */
  readonly locale?: string;

  /**
   *
   */
  readonly collator?: Intl.Collator;

  /**
   *
   */
  readonly nullsFirst?: boolean;
}
